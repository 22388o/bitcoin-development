[WIP] How to Review Bitcoin Core PRs


BEFORE YOU BEGIN

This how-to builds on the foundations laid by the following 3 articles:

1. https://bitcointechtalk.com/a-gentle-introduction-to-bitcoin-core-development-fdc95eaee6b8 by Jimmy Song
2. https://medium.com/@pierre_rochard/understanding-the-technical-side-of-bitcoin-2c212dd65c09 by Pierre Rochard
3. https://bitcointechtalk.com/contributing-to-bitcoin-core-a-personal-account-35f3a594340b by John Newbery


INTRODUCTION

Reviewing is the best way to begin contributing

Experienced review and testing are regularly cited by long-term Bitcoin Core
developers as both

  - resource bottlenecks, and

  - the best and most helpful way to begin contributing and earning reputation
    in the community

Yet the process and learning curve can seem intimidating and in practice very
few new contributors do it.

As a newcomer, this article represents my current understanding after a couple
months, a few dozen PR reviews (some more useful than others), a few issues
tested or handled, and a handful of commits.

Some of this understanding was gained from years of:

  - contributing to a large open source project,
    Ruby on Rails (https://github.com/rails/rails)

  - co-editing the "This Week in Rails" newsletter
    (https://rails-weekly.ongoodbits.com/archive)

  - co-developing and lead-maintaining Ransack, a popular Ruby search engine,
    for four years (https://github.com/activerecord-hackery/ransack)

Yet much of it is specific to Bitcoin Core and came only with time. I would have
preferred to know these things from the start. This is foremost a self-study
exercise, but perhaps it can be useful for others.


GENERAL

Be aware of what you donâ€™t know; years of deep experience and context in the
minds of the long-term contributors

Follow the bitcoin-core-dev IRC and mailing list

take the time to

  - understand the contribution process and guidelines

  - get to know the maintainers and regular contributors: what they do, what
    they like and want

concentrate on selflessly adding value with a humble approach

in general, focus on quality over quantity and a balance between deep work and
quick wins

big picture > nits and code style

remember that contributor/reviewer resources are limited; ask for them carefully
and respectfully

focus on user problems, actual bugs, and "used, but untested" methods that
affect outcomes and need tests

review and help the high-priority and more difficult PRs that tend to intimidate
and stagnate, killing authors' motivation with death by a thousand cuts from
nits/code style comments, lack of quality review, and rebase hell

try to help PRs move forward by reviewing, proposing tests or fixes in helpful
way, proposing to rebase, or even offering to take over the PR after months of
silence; in short, help each other!

avoid filing refactoring and fixup/cleanup PRs and commenting in PRs about code
style issues; activity like this actively repels multiple long term contributors
and diminishes your social capital on the project

the best time for any nit comments is after the concept acks and consensus on
the PR, and before the PR is finalised and has tested ACKs

no one is forced to take all review comments into account; it's perfectly fine
to say that you don't want to do something in a PR if you feel it is outside the
scope of the change, including/especially if it seems nitpicky

take nits and style advice in a purely advisory way (as in, feel free to adjust
if you happen to rebase, otherwise don't bother).. do any style adjustments
before merging and not necessarily right away

documentation is important, e.g. whether a function has a good description and
Doxygen documentation for all its argument, and high-level documentation of how
things work and interact

test coverage is essential; write any missing unit or functional tests

in general PRs that intelligently improve documentation and tests tend to be well-received

do not begin by trying to change consensus code; it is difficult and dangerous territory

the goal of bitcoin core is to maintain the correct consensus on the bitcoin
network, all else is secondary

it takes time; nothing can substitute for time invested in gathering context and
understanding from reading the code, issues, PRs/reviews, core dev IRC and mailing list

keep ego and hopes out of the process, don't take things personally and move forward

when in doubt, assume good intentions

be patient with people and outcomes

work on it every day

these are all much easier said than done. be forgiving with yourself and others

jnewbery: a good rule of thumb is to review 5-10 PRs for each PR you make
          Start small
          Have a plan, don't spread yourself too thin
          Sharpen your tools
          Ask for and offer help, like rebasing for people or adding test cases
          People are generous with their time because they care
          Contribute by understanding what others want and being respectful
          Learn to get people to review when needed

gmaxwell: Avoid doing review that is inconsistent or focused on minutia or code
          style, especially if it comes across as oppressive rather than
          enabling


TECHNICAL SPECIFICS

never put GitHub usernames in commits; this causes endless notifications

release notes should refer to the RPC help for details instead of substituting
for full documentation, for example: "Please refer to the RPC help of
`getbalances` for details."

to run functional tests in the gui, pass BITCOIND=bitcoin-qt

to turn on debug=net with the logging RPC: bitcoin-cli logging '["net"]'

if we need any more linters it should be to check for unexpected changes to
consensus code

concept ACK means that the reviewer acknowledges and agrees with the concept of
the change, but is not (yet) confirming they've looked at the code or tested it.

this can be a valuable signal to a PR author to let them know that the PR has
merit and is headed in the right direction.

manual testing of new features is always welcome.

while you're reviewing, adding tests yourself helps you understand the behaviour
and you can send them to the author who can add them to the PR too

contributing automated tests to the PR author is a really helpful way to start
contributing

authors really appreciate it when someone reviews the pr and provides additional tests

a comment that is really helpful in review: "here's what I tested and my methodology"

jnewbery/instagibbs:
- check out the branch locally
- run a difftool on each commit in turn using meld on linux and opendiff on mac
- ACK the commit hash of the HEAD commit from my local checkout of the branch,
  so unless my local tools are compromised, I know I'm ACKing the exact changes.
  it's useful when a force push happens and links to old commits are lost on GH.
- though unless you gpg sign the ACK, GH could just modify what you're saying :)
- if you want to fully remove trust, you can go the full Marco Falke and
  sign/opentimestamp all of your review comments :)

aj:
i find "gitk" useful for getting an overview of changes

fanquake:
- I have some core dev tools in https://github.com/fanquake/core-review
  It has guides on how to gitian build, review certain types of PRs, etc.
  I still need to improve the docs and push up more stuff I have sitting locally.
- There is also https://github.com/bitcoin-core/bitcoin-maintainer-tools
- Rough distro list for build-related changes:
  https://github.com/fanquake/core-review/blob/master/operating-systems.md

BIP 125 describes bitcoin core's mempool policy for allowing txs to be replaced:
https://github.com/bitcoin/bips/blob/master/bip-0125.mediawiki

harding: In case it's helpful to anyone, I took a quick look at the PR and
made notes about what I'd test for it:

https://gist.github.com/harding/168f82e7986a1befb0e785957fb600dd

harding's process:

1. Open PR in browser
2. Checkout PR in dev environment
3. Build
4. Run integration tests
5. During and after 2-4, make notes on what I need to review
6. Answer what questions I can by looking at the code
7. Start regtest node (or testnet or mainnet if necessary) and review actual
   operation matches my expectation from the code

jnewbery:

a really good habit when writing PRs is giving reviewers tips on how to review
and test the changes, e.g. "how to review this" is super helpful

I always download the PR branch to my machine so I can build and review locally.
I don't use the github webpage to review, only to leave comments.

My git tools: https://gist.github.com/jnewbery/1d45a6b5e14b3f3fefe5942d0cc2608d

I've got a short script that checks out the PR branch and queries the github API
to add a description to that branch locally, that makes it easier when I have a
bunch of PRs checked out locally that I can run a `git branch` command and see
what they are

once I have the branch locally, I'll set off a build in a VM while I look
through the changes

first, I run something like `git log --oneline upstream/master..`
that gives me a list of all the commits in the PR branch, one per line

and then I use a one-liner, which I have bash aliased as git-review, that steps
through the commits one-by-one, printing the commit log to the console, then
opening my difftool program:

for commit in `git log master..HEAD --oneline | cut -d' ' -f1 | tac`; do git log -1 $commit; git difftool ${commit}{^,} --dir-diff; done

I'll look at the diff, and when I quit the difftool program, git-review will
step forward to the next commit

First run through, I'll just skim everything, reading the commit logs and
looking at the overall changes, so I get an idea of what the PR is doing

Then I'll go through again, but look at each commit in more detail,
reviewing every line in detail

I make extensive use of the functional tests by adding
`import pdb; pdb.set_trace()`
break points, and then manually running RPC commands on the nodes under test

I pull the PR description from the github API and then use it to label the branch

There's an attribute of a git branch called `description` that you can update
manually, my `gb` doesn't map onto `git branch` exactly, I do some formatting on
the output so it includes the description

I'm using vagrant, just the standard ubuntu bionic image
I have a vagrant file that installs all the dependencies

I run make check and the functional tests, not usually --extended because I'm
too impatient

I have travis set up on jnewbery/bitcoin, so whenever I push a branch to my
github repo it'll get built in travis, although there's not much reason to look
at it for reviewing, since the branch is already built in bitcoin/bitcoin travis

Here's my vagrant config (YMMV): https://github.com/jnewbery/btc-dev

A toolchain for bitcoind data files: https://github.com/jnewbery/bitcointools

I'm still looking for suggestions for future PRs to cover and volunteers to lead
discussion


CREDITS

A special thank you to John Newbery for launching and running the Bitcoin Core
PR Reviews Club (https://bitcoin-core-review-club.github.io/) and to the
long-term contributors who participated so far: Dave Harding, Anthony Towns,
Gregory Sanders, Michael Ford, Andrew Chow, and Marco Falke.

This article includes observed comments on GitHub and IRC by the following
Bitcoin Core contributors/maintainers who deserve to be credited:
Wladimir J. van der Laan, Marco Falke, Pieter Wuille, and Gregory Maxwell.

Over the years I had become disillusioned by the central influence of BDFLs in
programming languages and open source projects. Wladimir van der Laan's humble
service to Bitcoin sparked the possibility to me of perhaps doing the same.

Finally, a big thank you to the Core contributors for their patience with my
stumbling review attempts so far, notably John Newbery, Marco Falke, JoÃ£o
Barbosa, practicalswift, Gregory Sanders, Jonas Schnelli, Pieter Wuille and
Wladimir J. van der Laan, and to Adam Jonas and John Newbery for their guidance
and advice from the start.
