NOTES

-----

laanwj:   Focus on user problems, actual bugs, and "used, but untested" methods
          that affect outcomes and need tests

          What kind of frustrates me, personally, is that we didn't manage to
          clearly separate out the consensus parts. Not to a library (which
          would be useful for rust-bitcoin et al), but also not even to a
          separate directory.
-----

jnewbery: Review 5-10 PRs per PR made
          3-4 ACKs before merging is good
          Start small
          Have a plan, don't spread yourself too thin
          Sharpen your tools
          Ask for and offer help, like rebasing for people or adding test cases
          People are generous with their time because they care
          Contribute by understanding what others want and being respectful
          Learn to get people to review when needed
-----

harding:  To grep Bitcoin "hidden" debug options:
          bitcoind -help-debug | grep -A3 -- -limit
-----

          To search for a term in git history:
          git log -S 'some string'
-----

          To see moved-only code:
          git show --color-moved=dimmed-zebra
-----

          To test compiler acceptance on the command line:

          $ echo 'int main(){ const int min_depth = { true ? 1 : 0 };}' | g++ -x c++ -
          $ echo 'int main(){ const int min_depth   { true ? 1 : 0 };}' | g++ -x c++ -
          $ echo 'int main(){ const int min_depth =   true ? 1 : 0  ;}' | g++ -x c++ -

          $ echo 'int main(){ const int min_depth =   true ? 1 : 0   }' | g++ -x c++ -
          <stdin>: In function ‘int main()’:
          <stdin>:1:51: error: expected ‘,’ or ‘;’ before ‘}’ token
-----

          C++ Compiler Explorer, shows compiler output and assembly:

          https://godbolt.org/
-----

          To launch the Python debugger on failure of a functional test, pass
          `--pdbonfailure` as seen in, say, test/functional/wallet_basic.py -h

          test/functional/wallet_basic.py --pdbonfailure

          Does not work via the test runner, e.g. this prints dots ad infinitum:

          test/functional/test_runner.py wallet_basic --pdbonfailure
-----

          To run a functional test X times and launch the debugger on failure:

          (for i in {1..100}; do test/functional/wallet_basic.py --pdbonfailure ; done)
-----

          Unit tests info:
          https://github.com/bitcoin/bitcoin/blob/master/src/test/README.md

          Help: src/test/test_bitcoin --help

          Run all tests with make check or src/test/test_bitcoin

          Run a single test with src/test/test_bitcoin -t suite_name/case_name

          Specify the log level, usually debug or all, with -l debug or -l all (see --help)

          Also, the test logs to a debug log file (in master)
          If you need temporary printing, you can do std::cout or std::cerr
-----

          To build Bitcoin with clang for better errors:

          CC=clang CXX=clang ./configure...
-----

          To turn on debug=net with the logging RPC:

          bitcoin-cli logging '["net"]'
-----

          Berkeley DB special commands (located in db4/bin):

          db4/bin/db_dump ~/.bitcoin/wallets/wallet.dat
          db4/bin/db_dump -p ~/.bitcoin/wallets/wallet.dat | grep -C 2 0X1F

          db4/bin/db_load
-----

sipa:     One easy way to make sure you have all the call sites is to rename it.

          If your end goal is integrating things into Bitcoin Core,
          getting familiar with the code is the best way to spend time.
          To do that (which i very much encourage you to!) I think it's better
          to focus on one piece at a time and actually integrate it.

          Never put GitHub usernames in commits, nor PR descriptions which are
          automatically copied into merge commits.
-----

laanwj:   Release notes should refer to the RPC help for details instead of
          substituting for full documentation. Example:
          "Please refer to the RPC help of `getbalances` for details."
-----

Marco:    To run functional tests in the gui, pass BITCOIND=bitcoin-qt
-----

gmaxwell: Avoid doing review that is inconsistent or focused on minutia or code
          style, especially if it comes across as oppressive rather than
          enabling.

          Ignore the smallest of nits, make style advice in a purely advisory
          way (as in, feel free to adjust if you happen to rebase, otherwise
          don't bother), move style adjustments-- if any-- until right before
          merging and not as soon as a PR opens. We've operated in that fashion
          before and I think the project accomplished a lot more at that time
          and was more enjoyable. (Likely not all due to coding style nits, but
          I would be surprised if it wasn't a factor.)

          I reiterate: the background level of refactors, style changes,
          cleanups, and other related activity is actively repelling multiple
          long term contributors, myself included. I beg: give it a bit of a
          rest, we have so many other things that are crying for our attention
          and our resolve. We should try to find some initiatives that we all
          feel more exited about, success with them would make it easier to work
          on other things... but right now a big style change is just not a
          unifying effort.
-----

harding   Idea: sendrawtransaction spends from cold wallet with network disabled
          to do a final inspection of the transaction in local mempool (mainly
          to check not forgetting an output and spending everything in fees).
          Before that try testmempoolaccept, and analyzepsbt before even
          broadcasting it.
-----

jnewbery: We now have a handy WITH_LOCK macro in src/sync.h#L209
-----

Static fully valid pubkey in the Core codebase to reference in unit tests:

sipa       Use the generator
           0x0279BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798
           with secret key 0x0000....000013, it's hardcoded in secp256k1

instagibbs functional test harness has static keys for quick reference when
           wallet isn't compiled

MarcoFalke ADDRESS_BCRT1_UNSPENDABLE or
           self.nodes[i].get_deterministic_priv_key().address
-----

ryanofsky I'm not sure the change from const std::string& to std::string&&
          is an improvement. You also now can't call SetInternalName with
          an lvalue (plain variable or reference). This is now an error:

          std::string name = "something";
          SetInternalName(name);

          People get confused about this stuff, but if the goal is to just
          move-enable SetInternalName, it should take plain std::string,
          not const std::string&, and not std::string&&.

          If a function just needs to read an argument (and not manipulate it
          before throwing it away or move it into a data structure) it should
          take const T&.

          If a function wants to give callers the option of moving from an
          argument but still allow copies, it should take plain T.

          If a function wants to force callers to move it should take T &&.
-----

GETDATA issues...

219 2019-05-11T20:48:22  <gmaxwell> gleb: sdaftuar: uh, is random fetch ordering putting more stress on orphan handling?  The INVs we get from peers are usually in dependency order. That makes us fetch in dependency order, and thus the results we get back end up being mostly in dependency order.
220 2019-05-11T20:48:42  <gmaxwell> With the random ordering I think we're breaking that.
221 2019-05-11T20:50:43  <sdaftuar> gmaxwell: i asked you that question! :P
222 2019-05-11T20:50:52  <sdaftuar> but yeah, i dunno, i wonder the same
223 2019-05-11T20:52:07  <gmaxwell> oh. you did? damn
224 2019-05-11T20:52:13  <gmaxwell> sorry, fishbrain here.
225 2019-05-11T20:52:48  <gmaxwell> Well, I noticed more use of the orphanmap in my logs which is what caused me to ask the question, so I so I believe the answer is yes.
226 2019-05-11T20:52:59  <gmaxwell> :-/
227 2019-05-11T20:53:04  <gmaxwell> this is annoying
228 2019-05-11T20:53:29  <sdaftuar> i think it at least seems we gave this insufficient thought before merging #14897, so if you have reason to believe it's making things worse, i certainly believe it
229 2019-05-11T20:53:32  <gribble> https://github.com/bitcoin/bitcoin/issues/14897 | randomize GETDATA(tx) request order and introduce bias toward outbound by naumenkogs Ã‚Â· Pull Request #14897 Ã‚Â· bitcoin/bitcoin Ã‚Â· GitHub
230 2019-05-11T20:53:50  <gmaxwell> it's not so much a problem but the orphan map is limited in size and its expiration process is random, so you really don't want to be using it 'by default'
231 2019-05-11T20:56:39  <gmaxwell> one answer to this would be to just improve the orphan map behavior.

171 2019-05-14T13:46:37  <sdaftuar> gmaxwell: regarding the orphan transaction issue and the getdata randomization behavior-- it looks to me like we (a) do not put any delay on getdata requests for outbound peers announcing a tx for the first time and (b) have a fixed delay for inbound peers announcing a tx for the first time
173 2019-05-14T13:48:09  <sdaftuar> gmaxwell: so i think in the case of a peer announcing a set of transactions that are new to us, we'll request those transactions in dependency order from that peer, except if an inbound peer's announcement is partially supserseded by a later announcement from an outbound peer for a subset of the transactions
174 2019-05-14T13:48:31  <sdaftuar> gmaxwell: so that seems like it should be a relatively small effect (and is an effect we have to some degree already)

-----

Slow getrawmempool...

<gmaxwell> getrawmempool verbose is astonishingly slow, a PR just went in to make it faster but it is still astonishgly slow.
137 2019-05-17T08:52:54  <gmaxwell> I am reasonably confident that it was not anywhere near this slow last time the mempools were big.
138 2019-05-17T08:53:21  <gmaxwell> This change in aug 2017 made all the univalue additions quadratic: https://github.com/bitcoin-core/univalue/commit/ceb1194137421afba01e8c1042bf75f3a2cdddc3 (which probably makes a number of our other RPCs slow too), but the changes works around it.
